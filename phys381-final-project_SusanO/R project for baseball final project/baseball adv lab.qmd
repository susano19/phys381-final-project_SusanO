---
title: "baseball"
author: "Susan Orgera"
format: 
  html:
    self-contained: true
---

```{r}
install.packages("vcd")  # Only run this once
library(vcd)


library(tidyverse)
library(ggplot2)
library(dplyr)
```




```{r}
pitch_data<-read_csv("baseball all events with outs.csv")
```




```{r}
pitch_t <- pitch_data |>
  group_by(pitch_type) |>
  count(pitch_type, sort = TRUE)
pitch_t
```

```{r}


pitch_data2 <- pitch_data %>%
  add_count(pitch_type, name = "pitch_type_count") %>%
  mutate(pitch_type = ifelse(pitch_type_count < 100, NA, pitch_type)) %>%
  select(-pitch_type_count)



pitch_t <- pitch_data2 |>
  group_by(pitch_type) |>
  count(pitch_type, sort = TRUE)
pitch_t
```



```{r}
count_events <- pitch_data2 |>
  group_by(events) |>
  count(events, sort = TRUE)
count_events
```

```{r}
count_description <- pitch_data2 |>
  group_by(description) |>
  count(description, sort = TRUE)
count_description

```

```{r}
#remove description and events entries that have low counts

pitch_data3 <- pitch_data2 %>%
  add_count(description, name = "count_description") %>%
  mutate(description = ifelse(count_description < 100, NA, description)) %>%
  select(-count_description)

count_description <- pitch_data3 |>
  group_by(description) |>
  count(description, sort = TRUE)
count_description

```

```{r}

pitch_data3 <- pitch_data3 %>%
  add_count(events, name = "count_events") %>%
  mutate(events = ifelse(count_events < 100, NA, description)) %>%
  select(-count_events)

count_events <- pitch_data3 |>
  group_by(events) |>
  count(events, sort = TRUE)
count_events

```

```{r}
clean_pitch_data <- pitch_data3 %>%
  filter(
    !is.na(events),
    !is.na(description),
    !is.na(pitch_type)
  )
```



```{r}
ggplot(clean_pitch_data, aes(x = pitch_type, fill = description)) +
  geom_bar(position = "dodge") +
  labs(title = "Distribution of Description (outcome) by Pitch Type",
       x = "Pitch Type", y = "Count") +
  theme_minimal()

```




```{r}

ggplot(clean_pitch_data, aes(x = pitch_type, fill = events)) +
  geom_bar(position = "dodge") +
  labs(title = "Distribution of Events by Pitch Type",
       x = "Pitch Type", y = "Count") +
  theme_minimal()

```




```{r}
chisq.test(table(clean_pitch_data$pitch_type, clean_pitch_data$events))

```

```{r}
# Build the contingency table
tbl <- table(clean_pitch_data$pitch_type, clean_pitch_data$events)

# Run the chi-squared test
chi_res <- chisq.test(tbl)

# Look at the standardized residuals
chi_res$stdres

```

```{r}
install.packages("corrplot")
```


```{r}
library(corrplot)
corrplot(chi_res$stdres, is.cor = FALSE, method = "color", tl.cex = 0.8,
         title = "Standardized Residuals: Pitch Type vs Events", mar = c(0,0,2,0))

```

```{r}
library(dplyr)
library(tidyr)

# Get standardized residuals and convert to a data frame
resid_df <- as.data.frame(chi_res$stdres) %>%
  rename(pitch_type = Var1, event = Var2, residual = Freq)

# Plot the heatmap
ggplot(resid_df, aes(x = event, y = pitch_type, fill = residual)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  labs(title = "Standardized Residuals: Pitch Type vs Events",
       x = "Event", y = "Pitch Type", fill = "Residual") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

```{r}
table(clean_pitch_data$pitch_type, clean_pitch_data$events)

```

```{r}
chisq.test(table(clean_pitch_data$pitch_type, clean_pitch_data$events))

```

```{r}

ggplot(clean_pitch_data, aes(x = pitch_type, fill = events)) +
  geom_bar(position = "fill") +  # proportion stacked bars
  labs(y = "Proportion", title = "Events by Pitch Type") +
  theme_minimal()

```


```{r}

ggplot(clean_pitch_data, aes(x = events, fill = pitch_type)) +
  geom_bar(position = "fill") +  # proportion stacked bars
  labs(y = "Proportion", title = "Pitch Type by Events") +
  theme_minimal()

```


```{r}

tbl <- table(clean_pitch_data$pitch_type, clean_pitch_data$events)

assocstats(tbl)

```
```{r}
clean_pitch_data %>%
  count(pitch_type, events) %>%
  arrange(desc(n)) %>%
  top_n(10, n)
```

```{r}
clean_pitch_data %>%
  count(pitch_type, description) %>%
  arrange(desc(n)) %>%
  top_n(10, n)
```

```{r}
clean_pitch_data %>%
  count(pitch_type, events) %>%
  group_by(pitch_type) %>%
  mutate(prop = n / sum(n)) %>%
  arrange(pitch_type, desc(prop))

```

```{r}
clean_pitch_data %>%
  count(pitch_type, description) %>%
  group_by(pitch_type) %>%
  mutate(prop = n / sum(n)) %>%
  arrange(pitch_type, desc(prop))

```
```{r}
# Filter to only "hit_into_play" descriptions and count pitch types
pitch_play_props <- clean_pitch_data %>%
  filter(description == "hit_into_play") %>%
  count(pitch_type) %>%
  mutate(percent = n / sum(n) * 100)

pitch_play_props
```

```{r}
# Filter to only "swinging_strike_blocked" descriptions and count pitch types
pitch_play_props2 <- clean_pitch_data %>%
  filter(description == "swinging_strike_blocked") %>%
  count(pitch_type) %>%
  mutate(percent = n / sum(n) * 100)

pitch_play_props2
```

```{r}

# Filter to only "hit_by_pitch" descriptions and count pitch types
pitch_play_props3 <- clean_pitch_data %>%
  filter(description == "hit_by_pitch") %>%
  count(pitch_type) %>%
  mutate(percent = n / sum(n) * 100)

pitch_play_props3

```

```{r}

ggplot(pitch_play_props, aes(x = reorder(pitch_type, -percent), y = percent)) +
  geom_col(fill = "steelblue") +
  labs(title = "Pitch Types When Ball Is Hit Into Play",
       x = "Pitch Type", y = "Percentage") +
  theme_minimal()
```


```{r}


# Total pitches per pitch type
total_by_type <- pitch_data2 %>% #clean_pitch_data
  count(pitch_type, name = "total")

# Hit-into-play pitches per pitch type
in_play_by_type <- pitch_data2 %>% #clean_pitch_data
  filter(description == "hit_into_play") %>%
  count(pitch_type, name = "hit_into_play")

# Join and calculate proportion
normalized_in_play <- left_join(in_play_by_type, total_by_type, by = "pitch_type") %>%
  mutate(percent_hit_into_play = hit_into_play / total * 100)

normalized_in_play


```

```{r}
# Plot
ggplot(normalized_in_play, aes(x = reorder(pitch_type, percent_hit_into_play), 
                                y = percent_hit_into_play)) +
  geom_col(fill = "#69b3a2") +
  coord_flip() +  # horizontal bars
  labs(
    title = "Percentage of Pitches Hit Into Play by Type",
    subtitle = "Normalized by total pitches thrown per type",
    x = "Pitch Type",
    y = "Hit Into Play (%)"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )
```

```{r}
normalized_home_run <- pitch_data %>%
  group_by(pitch_type) %>%
  summarise(
    total_pitches = n(),
    home_runs = sum(events == "home_run", na.rm = TRUE)
  ) %>%
  mutate(percent_home_run = 100 * home_runs / total_pitches)

```



```{r}
# Rename your original column for consistency
normalized_in_play <- normalized_in_play %>%
  rename(percent_hit_into_play = percent_hit_into_play)

# Combine both datasets
combined_plot_data <- normalized_in_play %>%
  select(pitch_type, percent_hit_into_play) %>%
  left_join(normalized_home_run %>% select(pitch_type, percent_home_run),
            by = "pitch_type") %>%
  pivot_longer(cols = c(percent_hit_into_play, percent_home_run),
               names_to = "Metric", values_to = "Percent") %>%
  mutate(Metric = recode(Metric,
                         percent_hit_into_play = "Hit Into Play",
                         percent_home_run = "Home Run"))

```


```{r}
ggplot(combined_plot_data, aes(x = reorder(pitch_type, -Percent), y = Percent, fill = Metric)) +
  geom_col(position = "dodge") +
  labs(
    title = "Normalized Hit and Home Run Rates by Pitch Type",
    subtitle = "Based on percentage of pitches resulting in each outcome",
    x = "Pitch Type",
    y = "Percentage",
    fill = "Outcome"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12)
  )

```






```{r}
# Hit Into Play
in_play_ci <- pitch_data %>%
  mutate(in_play = description == "hit_into_play") %>%
  group_by(pitch_type) %>%
  summarise(
    total = n(),
    hits = sum(in_play, na.rm = TRUE)
  ) %>%
  mutate(
    proportion = hits / total,
    se = sqrt(proportion * (1 - proportion) / total),
    lower = 100 * (proportion - 1.96 * se),
    upper = 100 * (proportion + 1.96 * se),
    Percent = 100 * proportion,
    Metric = "Hit Into Play"
  )

# Home Run
home_run_ci <- pitch_data %>%
  mutate(hr = events == "home_run") %>%
  group_by(pitch_type) %>%
  summarise(
    total = n(),
    hits = sum(hr, na.rm = TRUE)
  ) %>%
  mutate(
    proportion = hits / total,
    se = sqrt(proportion * (1 - proportion) / total),
    lower = 100 * (proportion - 1.96 * se),
    upper = 100 * (proportion + 1.96 * se),
    Percent = 100 * proportion,
    Metric = "Home Run"
  )

# Combine
plot_data_ci <- bind_rows(in_play_ci, home_run_ci)

```



```{r}
ggplot(plot_data_ci, aes(x = reorder(pitch_type, -Percent), y = Percent, fill = Metric)) +
  geom_col(position = position_dodge(width = 0.9), width = 0.7) +
  geom_errorbar(aes(ymin = lower, ymax = upper),
                position = position_dodge(width = 0.9),
                width = 0.2, color = "black") +
  labs(
    title = "Normalized Hit and Home Run Rates by Pitch Type",
    subtitle = "Includes 95% Confidence Intervals",
    x = "Pitch Type",
    y = "Percentage",
    fill = "Outcome"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12)
  )

```

```{r}
unique(pitch_data$description)
unique(pitch_data$events)
```

















```{r}

# Total pitches per pitch type
total_by_type <- pitch_data2 %>% #clean_pitch_data
  count(pitch_type, name = "total")

# Home runs per pitch type
home_run_by_type <- pitch_data2 %>%
  filter(events == "home_run") %>%
  count(pitch_type, name = "home_run")

# Join and calculate percentage
normalized_home_runs <- left_join(home_run_by_type, total_by_type, by = "pitch_type") %>%
  mutate(percent_home_runs = home_run / total * 100) %>%
  arrange(desc(percent_home_runs))  # Sort for plotting

```

```{r}
table(pitch_data2$events)
```


```{r}
 
# Example: create long-format data from your normalized percentages
combined_normalized <- normalized_in_play %>%
  select(pitch_type, percent_hit_into_play) %>%
  rename(`Hit Into Play` = percent_hit_into_play)

# Assume you have home_run data similarly normalized:
normalized_home_run <- your_home_run_data %>%
  select(pitch_type, percent_home_run) %>%
  rename(`Home Run` = percent_home_run)

# Join and pivot to long format
plot_data <- left_join(combined_normalized, normalized_home_run, by = "pitch_type") %>%
  pivot_longer(cols = c("Hit Into Play", "Home Run"),
               names_to = "Metric",
               values_to = "Percent")

# Plot
ggplot(plot_data, aes(x = reorder(pitch_type, -Percent), y = Percent, fill = Metric)) +
  geom_col(position = "dodge") +
  labs(
    title = "Normalized Outcomes by Pitch Type",
    subtitle = "Percentages normalized within pitch type",
    x = "Pitch Type",
    y = "Percent",
    fill = "Outcome Type"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12)
  )


```



```{r}

# Plot
ggplot(normalized_home_runs, aes(x = reorder(pitch_type, percent_home_runs), 
                                 y = percent_home_runs)) +
  geom_col(fill = "#ff6361") +
  coord_flip() +
  labs(
    title = "% Pitches Resulting in Home Runs by Pitch Type",
    subtitle = "Normalized by total pitches thrown per type",
    x = "Pitch Type",
    y = "Home Run Rate (%)"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )

```

```{r}


# Total pitches per pitch type (excluding NA)
total_by_type <- pitch_data2 %>%
  filter(!is.na(pitch_type)) %>%
  count(pitch_type, name = "total")

# Home runs and strikeouts per pitch type (excluding NA)
event_counts <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events)

# Combine and calculate rate
event_rates <- left_join(event_counts, total_by_type, by = "pitch_type") %>%
  mutate(percent = n / total * 100)

# Plot
ggplot(event_rates, aes(x = reorder(pitch_type, -percent), y = percent, fill = events)) +
  geom_col(position = "dodge") +
  labs(
    title = "Home Run vs Strikeout Rate by Pitch Type",
    subtitle = "Excludes NA pitch types | Data: pitch_data2",
    x = "Pitch Type",
    y = "Event Rate (%)",
    fill = "Event"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


```
```{r}
 
# Total pitches per pitch type (excluding NA)
total_by_type <- pitch_data2 %>%
  filter(!is.na(pitch_type)) %>%
  count(pitch_type, name = "total")

# Home runs and strikeouts per pitch type (excluding NA)
event_counts <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events)

# Combine with totals and calculate event rate
event_rates <- left_join(event_counts, total_by_type, by = "pitch_type") %>%
  mutate(percent = n / total * 100)

# Add standard error and confidence intervals
event_rates <- event_rates %>%
  mutate(
    prop = percent / 100,
    se = sqrt(prop * (1 - prop) / total),
    ci_low = percent - 1.96 * se * 100,
    ci_high = percent + 1.96 * se * 100
  )


# Plot with error bars
ggplot(event_rates, aes(x = reorder(pitch_type, -percent), y = percent, fill = events)) +
  geom_col(position = position_dodge(width = 0.9)) +
  geom_errorbar(aes(ymin = ci_low, ymax = ci_high),
                position = position_dodge(width = 0.9), width = 0.3) +
  labs(
    title = "Home Run vs Strikeout Rate by Pitch Type (with 95% CI)",
    subtitle = "Excludes NA pitch types | Data: pitch_data2",
    x = "Pitch Type",
    y = "Event Rate (%)",
    fill = "Event"
  ) +
  theme_minimal(base_size = 14)


```

```{r}

# Create contingency table
event_counts_table <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events) %>%
  spread(events, n, fill = 0)  # spread events into columns

# Apply Chi-square test
chi_square_result <- chisq.test(event_counts_table[, -1])  # exclude pitch_type column

# Show result
chi_square_result

#event_counts_table

```
```{r}

# Load necessary libraries
library(tidyverse)

# Sample data (replace with your actual pitch_data2)
# pitch_data2 <- read_csv("your_data.csv")  # Assuming you have the data loaded

# Create contingency table for Chi-square test
event_counts_table <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events) %>%
  spread(events, n, fill = 0)  # Spread event counts into columns

# View the contingency table
print(event_counts_table)

# Apply Chi-square test
chi_square_result <- chisq.test(event_counts_table[, -1])  # Exclude pitch_type column

# Show Chi-square test results
print(chi_square_result)

# Optional: If you'd like to inspect the residuals
residuals <- chi_square_result$residuals
print(residuals)

# Create a data frame of residuals for ggplot visualization
residuals_df <- as.data.frame(as.table(residuals))
colnames(residuals_df) <- c("Pitch_Type", "Event_Type", "Residual")

# Optional: Create a heatmap of residuals using ggplot
ggplot(residuals_df, aes(x = Pitch_Type, y = Event_Type, fill = Residual)) +
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
  theme_minimal() +
  labs(title = "Heatmap of Standardized Residuals",
       x = "Pitch Type",
       y = "Event Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```


```{r}
# Load necessary libraries
library(tidyverse)

# Assuming your pitch_data2 dataframe is already loaded
# Create contingency table for Chi-square test
event_counts_table <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events) %>%
  spread(events, n, fill = 0)  # Spread event counts into columns

# View the contingency table to ensure it's correct
print(event_counts_table)

# Apply Chi-square test (excluding the first column, which is pitch_type)
chi_square_result <- chisq.test(event_counts_table[, -1])  # Exclude pitch_type column

# Show Chi-square test results
print(chi_square_result)

# Extract the residuals from the Chi-square test result
residuals <- chi_square_result$residuals

# Convert the residuals matrix to a data frame for easier inspection
residuals_df <- as.data.frame(as.table(residuals))

# Rename columns for clarity
colnames(residuals_df) <- c("Pitch_Type", "Event_Type", "Residual")

# View the residuals table
print(residuals_df)

# Optionally, save the residuals table to a CSV if you want to inspect it further
write.csv(residuals_df, "residuals_table.csv", row.names = FALSE)

```



```{r}
# Load necessary libraries
library(tidyverse)

# Assuming your pitch_data2 dataframe is already loaded
# Convert pitch_type to character to prevent it from becoming a factor
pitch_data2$pitch_type <- as.character(pitch_data2$pitch_type)

# Create contingency table for Chi-square test
event_counts_table <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events) %>%
  spread(events, n, fill = 0)  # Spread event counts into columns

# View the contingency table to ensure it's correct
print(event_counts_table)

# Apply Chi-square test (excluding the first column, which is pitch_type)
chi_square_result <- chisq.test(event_counts_table[, -1])  # Exclude pitch_type column

# Show Chi-square test results
print(chi_square_result)

# Extract the residuals from the Chi-square test result
residuals <- chi_square_result$residuals

# Convert the residuals matrix to a data frame for easier inspection
residuals_df <- as.data.frame(as.table(residuals))

# Rename columns for clarity
colnames(residuals_df) <- c("Pitch_Type", "Event_Type", "Residual")

# View the residuals table
print(residuals_df)

# Optionally, save the residuals table to a CSV if you want to inspect it further
write.csv(residuals_df, "residuals_table.csv", row.names = FALSE)

```

```{r}
# Load necessary libraries
library(tidyverse)

# Assuming your pitch_data2 dataframe is already loaded
# Convert pitch_type to character to prevent it from becoming a factor
pitch_data2$pitch_type <- as.character(pitch_data2$pitch_type)

# Create contingency table for Chi-square test
event_counts_table <- pitch_data2 %>%
  filter(!is.na(pitch_type), events %in% c("home_run", "strikeout")) %>%
  count(pitch_type, events) %>%
  spread(events, n, fill = 0)  # Spread event counts into columns

# Ensure that 'pitch_type' stays as a character and not as a factor after spreading
event_counts_table$pitch_type <- as.character(event_counts_table$pitch_type)

# View the contingency table to ensure it's correct
print(event_counts_table)

# Apply Chi-square test (excluding the first column, which is pitch_type)
chi_square_result <- chisq.test(event_counts_table[, -1])  # Exclude pitch_type column

# Show Chi-square test results
print(chi_square_result)

# Extract the residuals from the Chi-square test result
residuals <- chi_square_result$residuals

# Convert the residuals matrix to a data frame for easier inspection
residuals_df <- as.data.frame(as.table(residuals))

# Rename columns for clarity
colnames(residuals_df) <- c("Pitch_Type", "Event_Type", "Residual")

# Ensure 'Pitch_Type' is still a character column
residuals_df$Pitch_Type <- as.character(residuals_df$Pitch_Type)

# View the residuals table
print(residuals_df)

# Optionally, save the residuals table to a CSV if you want to inspect it further
write.csv(residuals_df, "residuals_table.csv", row.names = FALSE)

```



```{r}


# Ensure pitch_type is a character after spreading (force it again)
event_counts_table$pitch_type <- as.character(event_counts_table$pitch_type)

# View the contingency table to ensure it's correct
print(event_counts_table)




# Apply Chi-square test (excluding the first column, which is pitch_type)
chi_square_result <- chisq.test(event_counts_table[, -1])  # Exclude pitch_type column

# Show Chi-square test results
print(chi_square_result)


```


```{r}

# Extract the residuals from the Chi-square test result
residuals <- chi_square_result$residuals

print(residuals)

# Convert the residuals matrix to a data frame for easier inspection

residuals_df <- as.data.frame(as.table(residuals), stringsAsFactors = FALSE)


# Rename columns for clarity
colnames(residuals_df) <- c("Pitch_Type", "Event_Type", "Residual")

# Ensure 'Pitch_Type' is still a character column in the residuals data frame
#residuals_df$Pitch_Type <- as.character(residuals_df$Pitch_Type)


# View the residuals table
print(residuals_df)


```




