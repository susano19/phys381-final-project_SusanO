---
title: "baseball2"
format: html
---

```{r}
install.packages("neuralnet")

```


```{r}
# Load libraries
library(tidyverse)
library(randomForest)
library(neuralnet)
library(nnet)
library(caret)
library(ggplot2)
library(dplyr)
```



```{r}
# Replace with your real data
df <- read_csv("baseball all events with outs.csv")

vars_used <- c("launch_speed", "bat_speed", "launch_angle", "release_speed", "pitch_type", "release_spin_rate")


df_clean <- df %>%
  select(all_of(vars_used)) %>%
  drop_na()

```



```{r}
lm_model <- lm(launch_speed ~ bat_speed + launch_angle + release_speed + pitch_type + release_spin_rate, data = df_clean)

summary(lm_model)

# Predictions & Metrics
pred_lm <- predict(lm_model, df_clean)
rmse_lm <- RMSE(pred_lm, df_clean$launch_speed)
r2_lm <- R2(pred_lm, df_clean$launch_speed)

cat("Linear Model — RMSE:", rmse_lm, " R²:", r2_lm)

```

```{r}
table(df_clean$pitch_type)
```


```{r}
rf_model <- randomForest(launch_speed ~ bat_speed + launch_angle + release_speed + pitch_type + release_spin_rate,
                         data = df_clean, ntree = 100, importance = TRUE)

pred_rf <- predict(rf_model, df_clean)

rmse_rf <- RMSE(pred_rf, df_clean$launch_speed)
r2_rf <- R2(pred_rf, df_clean$launch_speed)

cat("Random Forest — RMSE:", rmse_rf, " R²:", r2_rf)

```

```{r}
importance(rf_model)
varImpPlot(rf_model)

```

```{r}
library(pdp)
partial(rf_model, pred.var = "release_spin_rate") %>% plot()

```


```{r}

rf_model <- randomForest(launch_speed ~ bat_speed + launch_angle,
                         data = df_clean, ntree = 100, importance = TRUE)

pred_rf <- predict(rf_model, df_clean)

rmse_rf <- RMSE(pred_rf, df_clean$launch_speed)
r2_rf <- R2(pred_rf, df_clean$launch_speed)

cat("Random Forest — RMSE:", rmse_rf, " R²:", r2_rf)

```







```{r}
df_nnet <- df_clean %>%
  mutate(pitch_type = as.numeric(as.factor(pitch_type))) %>%
  select(launch_speed, bat_speed, launch_angle, release_speed, pitch_type, release_spin_rate) %>%
  drop_na()

# Scale predictors (excluding target)
scaled_predictors <- scale(df_nnet[ , -1])
df_scaled <- data.frame(launch_speed = df_nnet$launch_speed, scaled_predictors)


```

```{r}
 
set.seed(123)

nn_model <- nnet(
  launch_speed ~ .,
  data = df_scaled,
  size = 3,         # number of hidden neurons
  linout = TRUE,    # regression output
  maxit = 1000      # number of iterations
)


```


```{r}
 
pred_nnet <- predict(nn_model, df_scaled)

rmse_nnet <- RMSE(pred_nnet, df_scaled$launch_speed)
r2_nnet <- R2(pred_nnet, df_scaled$launch_speed)

cat("nnet model — RMSE:", rmse_nnet, " R²:", r2_nnet)


```







Predict likelihood of a hit or home run (classification)
Question: Based on pitch and contact characteristics, can we predict if the result will be a hit or home run?

Inputs:

All of the above + description, release_pos_x, release_pos_z, pfx_x, pfx_z, etc.

Target (binary or multi-class):

events simplified into:

hit vs. non-hit

home_run vs. other

strikeout, walk, hit, field_out

✅ Why NN helps: Classifying outcomes from spatial, physical, and game-state variables often benefits from nonlinear models.


```{r}
 
# Create binary target: hit vs. non-hit
df_bin <- df_clean %>%
  mutate(
    is_hit = ifelse(df_clean$events %in% c("single", "double", "triple", "home_run"), 1, 0),
    pitch_type = as.factor(pitch_type)  # Make sure pitch_type is a factor
  ) %>%
  select(is_hit, bat_speed, launch_angle, release_speed, pitch_type,
         release_spin_rate, plate_x, plate_z, pfx_x, pfx_z) %>%
  drop_na()

# Convert `is_hit` to a factor for classification (important for nnet)
df_bin$is_hit <- as.factor(df_bin$is_hit)

# Scale only numeric predictors
scaled_bin <- df_bin %>%
  mutate(across(where(is.numeric), scale))

# Fit neural net (classification)
set.seed(123)
nn_hit <- nnet(
  is_hit ~ ., 
  data = scaled_bin,
  size = 5, 
  maxit = 500, 
  decay = 0.01, 
  linout = FALSE,  # Important for classification
  trace = FALSE
)

# Check training output to ensure it ran properly
summary(nn_hit)

# Predictions and performance
pred_hit <- predict(nn_hit, scaled_bin, type = "class")

# Confusion Matrix
confusionMatrix(pred_hit, df_bin$is_hit)


```


```{r}
summary(nn_hit)
```

```{r}

table_pitch_event <- table(df$pitch_type, df$events)


```

```{r}
chi_result <- chisq.test(table_pitch_event)
print(chi_result)

```
```{r}
residuals <- chi_result$stdres
residuals_df <- as.data.frame(as.table(residuals))
colnames(residuals_df) <- c("Pitch_Type", "Event", "Std_Residual")

```


```{r}
library(ggplot2)

# Create heatmap with a refined color scale
ggplot(residuals_df, aes(x = Pitch_Type, y = Event, fill = Std_Residual)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "#264653",    # deep blue
    mid = "white", 
    high = "#e76f51",   # muted red
    midpoint = 0,
    name = "Std. Residual"
  ) +
  theme_minimal(base_size = 14) +
  labs(
    title = "Standardized Residuals: Pitch Type vs. Event",
    x = "Pitch Type",
    y = "Event"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid = element_blank()
  )

```

```{r}
# Filter residuals with absolute value greater than 2
significant_residuals <- residuals_df %>%
  filter(abs(Std_Residual) > 3) %>%
  arrange(desc(abs(Std_Residual)))

# Print the result
print(significant_residuals)


```
```{r}
library(knitr)
library(dplyr)

# Grouped and nicely formatted
significant_residuals %>%
  arrange(desc(abs(Std_Residual))) %>%
  kable(digits = 2, caption = "Pitch Type & Event Combinations with |Standardized Residual| > 3")

```


```{r}
library(ggplot2)

ggplot(significant_residuals, aes(x = reorder(paste(Pitch_Type, Event, sep = " → "), Std_Residual), y = Std_Residual, fill = Std_Residual > 0)) +
  geom_col(show.legend = FALSE) +
  scale_fill_manual(values = c("TRUE" = "#e76f51", "FALSE" = "#264653")) +
  coord_flip() +
  theme_minimal() +
  labs(title = "Significant Pitch Type → Event Deviations",
       x = "Pitch → Event",
       y = "Standardized Residual")

```







```{r}

# Filter data for only strikeouts and home runs
subset_data <- pitch_data2 %>%
  filter(events %in% c("strikeout", "home_run")) %>%
  count(pitch_type, events) %>%
  spread(events, n, fill = 0)  # Spread events into separate columns

```


```{r}
# Ensure pitch_type is character BEFORE chi-square and residuals
pitch_data2$pitch_type <- as.character(pitch_data2$pitch_type)


# Apply Chi-square test
chi_square_result <- chisq.test(subset_data[, -1])  # Exclude the pitch_type column
print(chi_square_result)

```

```{r}
# Get standardized residuals from Chi-square test
residuals <- chi_square_result$residuals

# Convert the residuals matrix into a data frame
residuals_df <- as.data.frame(as.table(residuals))

# Rename the columns for clarity
colnames(residuals_df) <- c("Pitch_Type", "Event_Type", "Residual")

```



```{r}
library(dplyr)
library(knitr)
library(kableExtra)

# Assuming residuals_df contains columns: Pitch_Type, Event_Type, Residual
# Filter for residuals > |2|
significant_residuals <- residuals_df %>%
  filter(abs(Residual) > 2) %>%
  arrange(desc(abs(Residual)))

# Display as a formatted table
significant_residuals %>%
  kable("html", col.names = c("Pitch Type", "Event Type", "Standardized Residual"),
        caption = "Pitch Type & Event Combinations with Standardized Residuals > |2|") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed"))

```



```{r}

library(ggplot2)
library(dplyr)

# Prepare residuals data with color coding for positive/negative residuals
residuals_df <- residuals_df %>%
  mutate(color = ifelse(Residual > 2, "Above |2|", ifelse(Residual < -2, "Below -|2|", "Within |2|")))

# Plot with vertical shading for residuals > |2|, and red bars above, blue bars below
ggplot(residuals_df, aes(x = reorder(Pitch_Type, Residual), y = Residual)) +
  geom_bar(stat = "identity", aes(fill = Residual > 0), position = "stack", width = 0.7, show.legend = FALSE) +  # Stacked bar, blue for negative, red for positive
  scale_fill_manual(values = c("TRUE" = "#e76f51", "FALSE" = "#264653")) +  # Red above 0, blue below 0
  coord_flip() +  # Flip axes to make the plot more readable
  theme_minimal(base_size = 14) +  # Minimal theme with larger text
  theme(
    axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 11),
    plot.margin = unit(c(1, 2, 1, 2), "cm")  # Adjust plot margins
  ) +
  labs(
    title = "Standardized Residuals for Strikeouts and Home Runs by Pitch Type",
    x = "Pitch Type",
    y = "Standardized Residual"
  ) +
  # Highlight regions where residuals exceed |2|
  geom_rect(data = residuals_df %>% filter(abs(Residual) > 2), 
            aes(xmin = as.numeric(Pitch_Type) - 0.5, xmax = as.numeric(Pitch_Type) + 0.5, 
                ymin = -Inf, ymax = Inf, fill = color), 
            alpha = 0.3, show.legend = FALSE) +  # Semi-transparent color shading for |2|
  scale_fill_manual(values = c("Above |2|" = "#ff6f61", "Below -|2|" = "#3b8ea5", "Within |2|" = "white")) +
  theme(legend.position = "none")  # Remove legend


```

